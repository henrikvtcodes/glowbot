import org.gradle.api.internal.file.collections.DefaultConfigurableFileCollection

apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/LICENSE.txt") as DefaultConfigurableFileCollection

def pubVersion = '2024.0.1'

def outputsFolder = file("$rootProject.layout.buildDirectory/outputs")

def versionFile = file("$outputsFolder/version.txt")

tasks.register('outputVersions') {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        rootProject.layout.buildDirectory
        rootProject.layout.buildDirectory.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

tasks.register('libraryBuild') {}

build.dependsOn outputVersions

tasks.register('copyAllOutputs', Copy) {
    destinationDir file("$rootProject.layout.buildDirectory/allOutputs")
    from versionFile
    dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

def artifactGroupId = 'com.orangeunilabs.roboled'
def baseArtifactId = 'RoboLED'
def javaBaseName = "_GROUP_com_orangeunilabs_roboled_ID_${baseArtifactId}-java_CLS"

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'

    from javadoc.destinationDir
}

tasks.register('outputJar', Jar) {
    dependsOn classes
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    from sourceSets.main.output
}

tasks.register('outputSourcesJar', Jar) {
    dependsOn classes
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('outputJavadocJar', Jar) {
    dependsOn javadoc

    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives outputJar
    archives outputSourcesJar
    archives outputJavadocJar
}

addTaskToCopyAllOutputs(outputSourcesJar)
addTaskToCopyAllOutputs(outputJavadocJar)
addTaskToCopyAllOutputs(outputJar)

build.dependsOn outputSourcesJar
build.dependsOn outputJavadocJar
build.dependsOn outputJar

libraryBuild.dependsOn build

def releasesRepoUrl = "$buildDir/repos/releases"

publishing {
    repositories {
        maven {

            url = releasesRepoUrl
        }
    }
}

tasks.register('cleanReleaseRepo', Delete) {
    delete releasesRepoUrl
}

tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}

model {
    publishing {
        publications {

            java(MavenPublication) {
                artifact jar
                artifact sourcesJar
                artifact javadocJar

                artifactId = "${baseArtifactId}-java"
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
